<tuto>
<meta>
	<language>shell</language>
	<platform>linux</platform>
</meta>

<h1>Introduction aux commandes de manipulation de fichiers</h1>

<h2>Cette leçon va vous présenter les commandes suivantes:</h2>
    <li>cp 		- Copier des fichiers et des répertoires</li> 
    <li>mv 		- Déplacer ou renommer les fichiers et répertoires</li>
    <li>rm 		- Supprimer les fichiers et répertoires</li>
    <li>mkdir 	- Créer des répertoires</li>

Ces commandes font partie des plus utilisées, ce sont les commandes de base pour manipuler les fichiers et les répertoires.
Elles permettent d'effectuer toutes les opérations de base mais aussi des opérations qui seraient complexes avec un gestionnaire de fichier graphique.
Par exemple, il est facile en ligne de commande de copier vers un répertoire uniquement les fichiers TXT dont la version est plus récente que celle du répertoire de destination. 

<shell>
programmer_alpha@tutotechno.com:~$ cp -u *.txt copyto_directory
</shell>
Un gestionnaire de fichier graphique n'a pas d'options pratique pour réaliser cela.

<h2>Les caractères "wildcard" (jokers)</h2>
Il existe des caractères spéciaux qui vont vous aider à spécifier rapidement des groupes de fichiers. 
Ces caractères spéciaux, appelés "wildcard", permettent de sélectionner différents groupes de fichiers selon le tableau ci-dessous.

	Signification
	<li>* 		- Représente n'importe quel groupe de caractères</li>
	<li>? 		- Représente un caractère unique</li> 
	<li>[characters] - Représente n'importe lequel des caractères qui sont listés entre crochets</li>
	<li>[!characters]	- Inversion du précédent : correspond à tout caractère qui n'est pas entre crochets</li>
	
	Il est aussi possible d'exprimer un jeu de caractères comme une classe de caractères POSIX selon la liste suivante :
	<li>[:alnum:] - caractères alphanumériques</li>
	<li>[:alpha:] - caractères alphabétiques</li>
	<li>[:digit:] - chiffres</li>
	<li>[:upper:] - caractères alphabétiques majuscules</li>
	<li>[:lower:] - caractères alphabétiques minuscules</li>

<h2>Utilisation des caractères "wildcard"</h2> 
Il est possible de construire des critères de sélection de noms de fichiers très précis. 
Voyons quelques exemples de "wildcards" et à quoi ils correspondent :
<li>*				: Tous les noms de fichiers</li>
<li>h*				: Les noms de fichiers commençant par la lettre "h"</li>
<li>a*.html			: Les noms de fichiers commençant par la lettre "a" et se terminant par ".html"</li>
<li>Source????		: Les noms commençant par "Source" suivi de 4 caractères exactement</li>
<li>[ABC]*			: Les noms commençant par "A", "B" ou "C" suivi par d'autres caractères</li>
<li>*[![xyz]]		: Les noms ne terminant pas par "x", "y" ou "z"</li>

Vous pouvez utiliser des caractères génériques avec n'importe quelle commande qui accepte des arguments de nom de fichier.

<h2><code>cp</code></h2>
La commande <code>cp</code> (copy) permet de copier des fichiers et des répertoires. 
Dans sa forme la plus simple, <code>cp</code> ne copie qu'un seul fichier:
<shell>
programmer_alpha@tutotechno.com:~$ cp fichierOrigine fichierDestination
</shell>

Elle peut également être utilisée pour copier plusieurs fichiers (et / ou répertoires) dans un répertoire différent:
<shell>
programmer_alpha@tutotechno.com:~$ cp fichier1 fichier2 repertoireDestination
</shell>

<h2>Exemples d'utilisation de la commande <code>cp</code> et de ses options :</h2>

cp fichier1 fichier2
Copie le contenu de "fichier1" dans "fichier2". Si "fichier2" n'existe pas, il est créé, sinon il est automatiquement remplacé par le contenu de "fichier1".

cp -i fichier1 fichier2
Comme ci-dessus mais, l'option "-i" (interactif) étant spécifiée, si "fichier2" existe l'utilisateur est invité à donner une confirmation avant que le contenu de "fichier1" ne soit remplacé.

cp fichier1 repertoire1
Copie "fichier1" dans le répertoire "repertoire1".

cp -R repertoire1 repertoire2
Copie le contenu du répertoire "repertoire1" dans le répertoire "repertoire2". Si le répertoire "repertoire2" n'existe pas, il est créé.

<h2><code>mv</code></h2>

La commande <code>mv</code> (move) peut soit déplacer, soit renommer les fichiers et répertoires. 
Pour renommer un fichier, elle est utilisée comme ceci:
<shell>
programmer_alpha@tutotechno.com:~$ mv fichier1 fichier2
</shell>

Pour déplacer des fichiers (et/ou répertoires) dans un répertoire différent:
<shell>
programmer_alpha@tutotechno.com:~$ mv fichier1 ... repertoire1
</shell>
Note : ici "..." signifie une liste de nom de fichiers ou de répertoires

<h2>Exemples d'utilisation de la commande <code>mv</code> et de ses options :</h2>

mv fichier1 fichier2
Si "fichier2" n'existe pas, alors "fichier1" est renommé "fichier2". Si "fichier2" existe, son contenu est silencieusement remplacé par le contenu de "fichier1".

mv -i fichier1 fichier2
Comme ci-dessus mais, l'option "-i" (interactif) étant spécifiée, si "fichier2" existe l'utilisateur est invité à donner une confirmation avant qu'il ne soit remplacé par le contenu de "fichier1".

mv fichier1 fichier2 fichier3 repertoire1
Les fichiers "fichier1", "fichier2", "fichier3" sont déplacés vers le répertoire "repertoire1". Si "repertoire1" n'existe pas, <code>mv</code> quittera avec une erreur.

mv repertoire1 repertoire2
Si "repertoire2" n'existe pas, alors "repertoire1" est renommé "repertoire2". Si "repertoire2" existe, "repertoire1" est déplacé dans "repertoire2".

<h2><code>rm</code></h2>

La commande <code>rm</code> (remove) supprime les fichiers et répertoires.
<shell>
programmer_alpha@tutotechno.com:~$ rm fichier ...
</shell>

Il peut également être utilisé pour supprimer des répertoires:
<shell>
programmer_alpha@tutotechno.com:~$ rm -r repertoire ...
</shell>

<h2>Exemples d'utilisation de la commande <code>rm</code> et de ses options :</h2>

rm fichier1 fichier2
Supprime "fichier1" et "fichier2".

rm -i fichier1 fichier2
Comme ci-dessus mais, l'option "-i" (interactif) étant spécifiée, l'utilisateur est invité à donner une confirmation avant chaque suppression.

rm -r repertoire1 repertoire2
Supprime "repertoire1" et "repertoire2" avec tout leur contenu. 
L'option "-r" indique que la suppression est récursive, ainsi les sous-répertoires et leur contenu seront également supprimés : les répertoires sont vidés !


<h2>Soyez prudent avec <code>rm</code> !</h2>

Linux n'a pas de commande "undelete". Une fois que vous supprimez quelque chose avec <code>rm</code>, c'est définitif ! 
Si vous n'êtes pas prudent, vous pouvez causer des dommages irréparables à votre système avec <code>rm</code>, en particulier avec les wildcards.
Avant d'utiliser <code>rm</code> avec des jokers, essayez cette astuce : remplacez votre commande <code>rm</code> par <code>ls</code> et exécutez-la.
En faisant cela, vous allez voir la liste des fichiers correspondant à vos jokers avant de les supprimer pour de bon.
Une fois testée votre commande avec <code>ls</code>, rappelez-la avec la flèche du haut, puis remplacez-la simplement par <code>rm</code>.

<h2><code>mkdir</code></h2>

La commande <code>mkdir</code> (make directory) permet de créer des répertoires.
Elle possède plusieurs options dont les plus courantes sont:
     -p: crée tous les répertoires nécessaires de l'arborescence du répertoire donné s'ils n'existent pas. Cette option est fréquemment utilisée pour construire des hiérarchies de répertoires complexes sans se soucier des cas où un répertoire serait manquant.
     -v: affiche chaque répertoire que <code>mkdir</code> crée. Le plus souvent utilisé avec "-p".
     -m: spécifie les autorisations en octal des répertoires créés. Cette option est notamment utilisée pour verrouiller les répertoires temporaires utilisés par les scripts shell. 

<shell>
programmer_alpha@tutotechno.com:~$ mkdir repertoire1 repertoire2 ...
</shell>

<h2>Exemples d'utilisation des commandes avec les "wildcards"</h2>

Les commandes que nous avons abordées ici acceptent toutes des noms de fichiers et de répertoires comme arguments, nous pouvons donc les utiliser avec des wildcards :
<shell>
cp *.html fichiers_html
</shell>
Copiez tous les fichiers se terminant par ".html" dans le répertoire "fichiers_html".

<shell>
mv ../mon_repertoire *.tar nouveau_repertoire
</shell>
Déplacez le répertoire "mon_repertoire" (du répertoire parent) et tous les fichiers se terminant par ".tar" (du répertoire courant) dans un nouveau répertoire nommé "nouveau_repertoire".

<shell>
rm *~
</shell>
Supprimez du répertoire de travail courant tous les fichiers dont le nom se termine par le caractère "~".
Sous Linux, il est fréquent que des applications créent des fichiers de sauvegarde en utilisant ce caractère. 
Grâce à cette commande, on va pouvoir les effacer simplement.

</tuto>

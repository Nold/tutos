<tuto>
<h1>Spring : Configuration par annotations</h1>
Depuis la version 2.5, Spring permet de configurer l'injection de dépendance à l'aide des annotations Java.
Ainsi, au lieu d'utiliser XML pour mapper les beans Springs aux classes Java, vous pouvez déplacer cette configuration directement dans la classe elle-même en utilisant des annotations.
Attention : spring procède à l'injection par annotations avant l'injection par configuration XML, si les deux sont utilisées conjointement, la dernière surcharge donc la première.

La configuration par annotations n'est pas activée par défaut par le conteneur Spring, il faut la déclarer dans le fichier contexte Spring de la façon suivante : 
<code type="xml">
	<![CDATA[
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:contexte="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

   <context:annotation-config/>
      ...   
</beans>]]>
</code>

Une fois la balise <code type="xml"><![CDATA[<context:annotation-config/>]]></code> déclarée, Spring va utiliser les annotations du code pour injecter les beans.
Voici la liste des principales annotations utilisables avec Spring :
<li>@Autowired : L'annotation Spring "@Autowired" permet de spécifier une variable d'instance à renseigner par Spring</li>
<li>@Required : L' annotation Spring "@Required" s'utilise sur une propriété pour certifier qu'elle est correctement renseignée</li>
<li>@Qualifier : L'annotation Spring "@Qualifier" associée avec "@Autowired" permet de préciser le bean exact à injecter.</li>
<li>@Resource : Annotation JSR-250 : similaire à "@Autowired" : c'est une annotation standard, du package javax.annotation</li>
<li>@PostConstruct : Annotation JSR-250 : permet la définition d'une méthode callback d'initialisation d'un bean</li>
<li>@PreDestroy : Annotation JSR-250 : permet la définition d'une méthode callback de destruction d'un bean</li>

Notez bien que ces trois dernières annotations sont bien supportées par Spring mais proviennent de la librairie J2EE common-annotations.jar.
</tuto>